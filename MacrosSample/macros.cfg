#####################################################################
#   Macros
#####################################################################

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    BED_MESH_CALIBRATE
    NOZZLE_CLEAN
    G28

    # Change to match printer build size
    G0 X175 Y175 Z30 F3600

    RESTORE_GCODE_STATE NAME=STATE_G32


[gcode_macro PRINT_START]
gcode:
    NOZZLE_CLEAN
    G32                            ; home all axes
    G90                            ; absolute positioning
    G1 Z20 F3000                   ; move nozzle away from bed


[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords

    #ERCF
    {% set unload = params.UNLOAD_AT_END|default(0)|int %}
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament

    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
   
    #ERCF
    {% if unload|int == 1%}
	ERCF_EJECT
    {% endif %}

    M107                                     ; turn off fan

    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

#[gcode_macro EXHAUST_FAN_ON]
#description: Turn on the exhaust fan

[gcode_macro _BEDFANVARS]
variable_threshold: 100         # If bed temp target is above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
variable_fast: 0.2              # Fan speed once bed temp is reached
variable_slow: 0.0              # Fan speed while bed is heating
gcode:

[gcode_macro BEDFANSSLOW]
gcode:
        # Vars
        {% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}

        SET_FAN_SPEED FAN=BedFans SPEED={SLOW}

[gcode_macro BEDFANSFAST]
gcode:
        # Vars
        {% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}

        SET_FAN_SPEED FAN=BedFans SPEED={FAST}

[gcode_macro BEDFANSOFF]
gcode:
        SET_FAN_SPEED FAN=BedFans SPEED=0


[gcode_macro EXHAUST_FAN_ON]
gcode:
       SET_FAN_SPEED FAN=exhaust_fan SPEED=1

[gcode_macro EXHAUST_FAN_OFF]
gcode:
       SET_FAN_SPEED FAN=exhaust_fan SPEED=0
############ Command overrides ############

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
        # Parameters
        {% set HEATER = params.HEATER|default("None") %}
        {% set TARGET = params.TARGET|default(0)|int %}
        # Vars
        {% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}

        {% if HEATER|lower == "extruder" %}
                M104 S{TARGET}
        {% elif HEATER|lower == "heater_bed" %}
                M99140 S{TARGET}
        {% else %}
                {action_respond_info("Heater %s not supported" % HEATER)}
        {% endif %}

        # Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
        {% if HEATER|lower == "heater_bed" %}
                {% if TARGET >= THRESHOLD %}
                        BEDFANSSLOW
                        UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
                {% else %}
                        BEDFANSOFF
                        UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0 # Cancel bed fan loop if it's running
                {% endif %}
        {% endif %}

# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M99190
gcode:
        # Parameters
        {% set S = params.S|int %}
        # Vars
        {% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}

        {% if S >= THRESHOLD %}
                BEDFANSSLOW                                                                                                # >= Threshold temp: Low speed fans while heating
        {% else %}
                BEDFANSOFF                                                                                                 # < Threshold temp: Turn bed fans off
        {% endif %}

        M140 {% for p in params
          %}{'%s%s' % (p, params[p])}{%
          endfor %}                                                                                                        # Set bed temp

        {% if S != 0 %}
                TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}  # Wait for bed temp within 5 degrees
        {% endif %}

        # Post-heating fan speeds
        {% if S >= THRESHOLD %}
                BEDFANSFAST                                                                                                # >= Threshold temp: Higher speed fans after heating finished
        {% endif %}

# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M99140
gcode:
        # Parameters
        {% set S = params.S|float %}

        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}

# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
        BEDFANSOFF
        _TURN_OFF_HEATERS

################ Monitoring loop #####################

# Turns bed fans to "fast" speed once target bed temp is reached.
[delayed_gcode bedfanloop]
gcode:
        # Vars
        {% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}

        {% if printer.heater_bed.target >= THRESHOLD %}                                                         # Continue only if target temp greater than threshold.
                {% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
                        BEDFANSFAST                                                                                        # If within 1 degree of target temp: Higher speed fans
                {% else %}
                        UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5                                           # If temp not reached yet: loop again
                {% endif %}
        {% endif %}

[gcode_macro RESONANCES_XY]
gcode:
        G28
        TEST_RESONANCES AXIS=X
        TEST_RESONANCES AXIS=Y

[gcode_macro SHAPER_CALIBRATE_XY]
gcode:
        G28
        SHAPER_CALIBRATE

[gcode_macro MEASURE_AXES_NOISE_TEST]
gcode:
        G28
        G0 X175 Y175 Z100 F3600
        MEASURE_AXES_NOISE

#[gcode_macro RUNOUT_INFO]
#gcode:
#  {% if 'filament_motion_sensor runout' in printer.configfile.settings %}
#   {% set enable = printer['filament_motion_sensor filament_sensor'].enabled %}
#    {% set detect = printer['filament_motion_sensor firament_sensor'].filament_detected %}
#    {% set enable = true %}
#    {% set detect = true %}
#    {action_respond_info("RUNOUT Motion Sensor:
#                          Enabled: %s
#                          Detect Filament: %s" % (enable|lower,detect|lower))}
#  {% endif %}

[gcode_macro PID_Tune_Extruder]
gcode:
        PID_CALIBRATE HEATER=extruder TARGET=240

[gcode_macro PID_Tune_Bed]
gcode:
        PID_CALIBRATE HEATER=heater_bed TARGET=110


[gcode_macro NOZZLE_CLEAN]
variable_start_x: 120
variable_start_y: 350
variable_start_z: 4.5
variable_wipe_dist: -50
variable_wipe_qty: 3
variable_wipe_spd: 200
variable_raise_distance: 30

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}

 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G0 Z30 
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G1 Z{raise_distance}


[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
variable_probing:False
gcode:
 SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=True
 BED_MESH_CALIBRATE_BASE
 SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=False

[gcode_macro Z_OFFSET_APPLY]
gcode:
	Z_OFFSET_APPLY_PROBE

[gcode_macro PROBE_CALIBRATE]
gcode:
    G28 X Y
    G0 X175 Y175
    CARTOGRAPHER_CALIBRATE
